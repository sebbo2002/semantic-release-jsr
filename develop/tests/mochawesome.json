{
  "stats": {
    "suites": 5,
    "tests": 8,
    "passes": 8,
    "pending": 0,
    "failures": 0,
    "start": "2025-07-15T14:19:09.681Z",
    "end": "2025-07-15T14:19:09.704Z",
    "duration": 23,
    "testsRegistered": 8,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "8a340258-5be2-4d79-846f-87cb89fd67c3",
      "title": "",
      "fullFile": "/home/runner/work/semantic-release-jsr/semantic-release-jsr/test/lib/utils.ts",
      "file": "/test/lib/utils.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "b79ccb5c-f849-4f79-ab00-3eaaf23e4df3",
          "title": "Utils",
          "fullFile": "/home/runner/work/semantic-release-jsr/semantic-release-jsr/test/lib/utils.ts",
          "file": "/test/lib/utils.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "4deae0f8-d495-410c-95f7-efbe9ce4775d",
              "title": "generatePublishResponse()",
              "fullFile": "/home/runner/work/semantic-release-jsr/semantic-release-jsr/test/lib/utils.ts",
              "file": "/test/lib/utils.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with release",
                  "fullTitle": "Utils generatePublishResponse() should work with release",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const config={cwd:process.cwd(),name:\"@sebbo2002/ical-generator\",prepare:{versionJsonPaths:[]},publish:{binFolder:\"\",canary:false,pkgJsonPath:\"\",publishArgs:[]}};const context={nextRelease:{channel:\"\",gitHead:\"\",gitTag:\"v1.2.3\",name:\"v1.2.3\",notes:\"# [1.2.3](\\u2026)\",type:\"patch\",version:\"1.2.3\"}};const response=(0,import_src.generatePublishResponse)(config,context);assert.deepStrictEqual(response,{name:\"JSR.io\",url:\"https://jsr.io/@sebbo2002/ical-generator@1.2.3\"})",
                  "err": {},
                  "uuid": "312667b1-0e9b-4988-97b9-ed16acd5ec94",
                  "parentUUID": "4deae0f8-d495-410c-95f7-efbe9ce4775d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work without release",
                  "fullTitle": "Utils generatePublishResponse() should work without release",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const config={cwd:process.cwd(),name:\"@sebbo2002/ical-generator\",prepare:{versionJsonPaths:[]},publish:{binFolder:\"\",canary:false,pkgJsonPath:\"\",publishArgs:[]}};const context={};const response=(0,import_src.generatePublishResponse)(config,context);assert.deepStrictEqual(response,{name:\"JSR.io\",url:\"https://jsr.io/@sebbo2002/ical-generator/versions\"})",
                  "err": {},
                  "uuid": "edcfa77e-b8e7-4b3c-989b-057f0a2a771f",
                  "parentUUID": "4deae0f8-d495-410c-95f7-efbe9ce4775d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "312667b1-0e9b-4988-97b9-ed16acd5ec94",
                "edcfa77e-b8e7-4b3c-989b-057f0a2a771f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "647493be-343b-451c-b03f-c1be33c9a6fb",
              "title": "updateVersionJson()",
              "fullFile": "/home/runner/work/semantic-release-jsr/semantic-release-jsr/test/lib/utils.ts",
              "file": "/test/lib/utils.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"updateVersionJson()\"",
                  "fullTitle": "Utils updateVersionJson() \"before each\" hook in \"updateVersionJson()\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "tmpDir=await(0,import_promises.mkdtemp)((0,import_node_path.join)((0,import_node_os.tmpdir)(),\"semantic-release-jsr-\"));filePath=(0,import_node_path.join)(tmpDir,\"package.json\")",
                  "err": {},
                  "uuid": "7fdfd563-11bd-4bd6-a071-cd4ee43db5a1",
                  "parentUUID": "647493be-343b-451c-b03f-c1be33c9a6fb",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"updateVersionJson()\"",
                  "fullTitle": "Utils updateVersionJson() \"after each\" hook in \"updateVersionJson()\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await(0,import_promises.rm)(tmpDir,{force:true,recursive:true})",
                  "err": {},
                  "uuid": "b8b8c30c-bada-4239-81e1-c6b1cd639e5f",
                  "parentUUID": "647493be-343b-451c-b03f-c1be33c9a6fb",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should throw an error if the version could not be replaced",
                  "fullTitle": "Utils updateVersionJson() should throw an error if the version could not be replaced",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mockFile=\"{}\";await(0,import_promises.writeFile)(filePath,mockFile,\"utf8\");const context={logger:{log:__name(()=>{},\"log\")},nextRelease:{version:\"1.2.3\"}};await assert.rejects((0,import_src.updateVersionJson)(filePath,context),/Failed to replace version in/)",
                  "err": {},
                  "uuid": "050a3118-3d04-45ee-8899-b41a28e2a72b",
                  "parentUUID": "647493be-343b-451c-b03f-c1be33c9a6fb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "adac06c9-d1a0-4b57-8d54-01a5373d1a16",
                  "title": "different version",
                  "fullFile": "/home/runner/work/semantic-release-jsr/semantic-release-jsr/test/lib/utils.ts",
                  "file": "/test/lib/utils.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should update version if they are different",
                      "fullTitle": "Utils updateVersionJson() different version should update version if they are different",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const mockFile='{ \"version\": \"1.2.3\" }';await(0,import_promises.writeFile)(filePath,mockFile,\"utf8\");const context={logger:{log:__name(()=>{},\"log\")},nextRelease:{version:\"1.2.4\"}};await(0,import_src.updateVersionJson)(filePath,context);const updatedFile=await(0,import_promises.readFile)(filePath,\"utf8\");assert.strictEqual(updatedFile,'{ \"version\": \"1.2.4\" }')",
                      "err": {},
                      "uuid": "68050143-4d05-4b4c-9cda-1e90db0dd7fb",
                      "parentUUID": "adac06c9-d1a0-4b57-8d54-01a5373d1a16",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should update version if they are different (no whitespace)",
                      "fullTitle": "Utils updateVersionJson() different version should update version if they are different (no whitespace)",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const mockFile='{\"version\":\"1.2.3\"}';await(0,import_promises.writeFile)(filePath,mockFile,\"utf8\");const context={logger:{log:__name(()=>{},\"log\")},nextRelease:{version:\"1.2.4\"}};await(0,import_src.updateVersionJson)(filePath,context);const updatedFile=await(0,import_promises.readFile)(filePath,\"utf8\");assert.strictEqual(updatedFile,'{\"version\":\"1.2.4\"}')",
                      "err": {},
                      "uuid": "1bf861db-b502-41fa-aed6-3c2a06d8f6ca",
                      "parentUUID": "adac06c9-d1a0-4b57-8d54-01a5373d1a16",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should update version if they are different (mixed whitespace)",
                      "fullTitle": "Utils updateVersionJson() different version should update version if they are different (mixed whitespace)",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const mockFile='{\"version\"   :\"1.2.3\"   }';await(0,import_promises.writeFile)(filePath,mockFile,\"utf8\");const context={logger:{log:__name(()=>{},\"log\")},nextRelease:{version:\"1.2.4\"}};await(0,import_src.updateVersionJson)(filePath,context);const updatedFile=await(0,import_promises.readFile)(filePath,\"utf8\");assert.strictEqual(updatedFile,'{\"version\"   :\"1.2.4\"   }')",
                      "err": {},
                      "uuid": "2dfc6079-3116-4cf9-b36c-f3dde16256c1",
                      "parentUUID": "adac06c9-d1a0-4b57-8d54-01a5373d1a16",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should update version if they are different (beta version)",
                      "fullTitle": "Utils updateVersionJson() different version should update version if they are different (beta version)",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const mockFile='{ \"version\": \"1.2.3-beta.3\" }';await(0,import_promises.writeFile)(filePath,mockFile,\"utf8\");const context={logger:{log:__name(()=>{},\"log\")},nextRelease:{version:\"1.2.3-beta.4\"}};await(0,import_src.updateVersionJson)(filePath,context);const updatedFile=await(0,import_promises.readFile)(filePath,\"utf8\");assert.strictEqual(updatedFile,'{ \"version\": \"1.2.3-beta.4\" }')",
                      "err": {},
                      "uuid": "534fe0fd-5b8a-4818-b8d7-96417fee7c48",
                      "parentUUID": "adac06c9-d1a0-4b57-8d54-01a5373d1a16",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "68050143-4d05-4b4c-9cda-1e90db0dd7fb",
                    "1bf861db-b502-41fa-aed6-3c2a06d8f6ca",
                    "2dfc6079-3116-4cf9-b36c-f3dde16256c1",
                    "534fe0fd-5b8a-4818-b8d7-96417fee7c48"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 4,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "b0048ab5-a9ca-41b4-96ff-6582a740b675",
                  "title": "same version",
                  "fullFile": "/home/runner/work/semantic-release-jsr/semantic-release-jsr/test/lib/utils.ts",
                  "file": "/test/lib/utils.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should skip when version is already up to date",
                      "fullTitle": "Utils updateVersionJson() same version should skip when version is already up to date",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const mockFile='{ \"version\": \"1.2.3\" }';await(0,import_promises.writeFile)(filePath,mockFile,\"utf8\");let matched=false;const context={logger:{log:__name(msg=>{if(typeof msg===\"string\"){const match=msg.match(/Skipped, (.+) is already up to date/);if(match){assert.strictEqual(match[1],filePath);matched=true}}},\"log\")},nextRelease:{version:\"1.2.3\"}};await(0,import_src.updateVersionJson)(filePath,context);const updatedFile=await(0,import_promises.readFile)(filePath,\"utf8\");assert.strictEqual(updatedFile,mockFile);assert.ok(matched)",
                      "err": {},
                      "uuid": "7da1b58b-a18f-4814-a36f-e194fec5657f",
                      "parentUUID": "b0048ab5-a9ca-41b4-96ff-6582a740b675",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "7da1b58b-a18f-4814-a36f-e194fec5657f"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [
                "050a3118-3d04-45ee-8899-b41a28e2a72b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}