{
  "stats": {
    "suites": 5,
    "tests": 8,
    "passes": 8,
    "pending": 0,
    "failures": 0,
    "start": "2024-08-22T19:37:35.082Z",
    "end": "2024-08-22T19:37:35.100Z",
    "duration": 18,
    "testsRegistered": 8,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "c82c42cd-f043-4d5d-821c-d287ade63c43",
      "title": "",
      "fullFile": "/home/runner/work/semantic-release-jsr/semantic-release-jsr/test/lib/utils.ts",
      "file": "/test/lib/utils.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "3e84bbca-1678-4195-b7dc-a6ebc8ee26c3",
          "title": "Utils",
          "fullFile": "/home/runner/work/semantic-release-jsr/semantic-release-jsr/test/lib/utils.ts",
          "file": "/test/lib/utils.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "1a1492e3-3075-48d7-912c-c0be3c9b3adb",
              "title": "generatePublishResponse()",
              "fullFile": "/home/runner/work/semantic-release-jsr/semantic-release-jsr/test/lib/utils.ts",
              "file": "/test/lib/utils.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with release",
                  "fullTitle": "Utils generatePublishResponse() should work with release",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const config={cwd:process.cwd(),name:\"@sebbo2002/ical-generator\",prepare:{versionJsonPaths:[]},publish:{binFolder:\"\",canary:false,pkgJsonPath:\"\",publishArgs:[]}};const context={nextRelease:{version:\"1.2.3\",gitTag:\"v1.2.3\",name:\"v1.2.3\",type:\"patch\",channel:\"\",gitHead:\"\",notes:\"# [1.2.3](\\u2026)\"}};const response=generatePublishResponse(config,context);assert.deepStrictEqual(response,{name:\"JSR.io\",url:\"https://jsr.io/@sebbo2002/ical-generator@1.2.3\"})",
                  "err": {},
                  "uuid": "96b02aa6-2167-4071-84f0-e254e571dc91",
                  "parentUUID": "1a1492e3-3075-48d7-912c-c0be3c9b3adb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work without release",
                  "fullTitle": "Utils generatePublishResponse() should work without release",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const config={cwd:process.cwd(),name:\"@sebbo2002/ical-generator\",prepare:{versionJsonPaths:[]},publish:{binFolder:\"\",canary:false,pkgJsonPath:\"\",publishArgs:[]}};const context={};const response=generatePublishResponse(config,context);assert.deepStrictEqual(response,{name:\"JSR.io\",url:\"https://jsr.io/@sebbo2002/ical-generator/versions\"})",
                  "err": {},
                  "uuid": "a1217e83-1f05-4b52-9ea5-4bdc1e3d50df",
                  "parentUUID": "1a1492e3-3075-48d7-912c-c0be3c9b3adb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "96b02aa6-2167-4071-84f0-e254e571dc91",
                "a1217e83-1f05-4b52-9ea5-4bdc1e3d50df"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a1393c97-3cca-40f9-bce4-e852ce2a5ad2",
              "title": "updateVersionJson()",
              "fullFile": "/home/runner/work/semantic-release-jsr/semantic-release-jsr/test/lib/utils.ts",
              "file": "/test/lib/utils.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"updateVersionJson()\"",
                  "fullTitle": "Utils updateVersionJson() \"before each\" hook in \"updateVersionJson()\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "tmpDir=await mkdtemp(join(tmpdir(),\"semantic-release-jsr-\"));filePath=join(tmpDir,\"package.json\")",
                  "err": {},
                  "uuid": "43910024-90d5-42d4-9095-ca34fa63329e",
                  "parentUUID": "a1393c97-3cca-40f9-bce4-e852ce2a5ad2",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"updateVersionJson()\"",
                  "fullTitle": "Utils updateVersionJson() \"after each\" hook in \"updateVersionJson()\"",
                  "timedOut": false,
                  "duration": 1,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await rm(tmpDir,{recursive:true,force:true})",
                  "err": {},
                  "uuid": "ad9b1b7f-8549-4b38-881a-2ede49d289b7",
                  "parentUUID": "a1393c97-3cca-40f9-bce4-e852ce2a5ad2",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should throw an error if the version could not be replaced",
                  "fullTitle": "Utils updateVersionJson() should throw an error if the version could not be replaced",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mockFile=\"{}\";await writeFile(filePath,mockFile,\"utf8\");const context={nextRelease:{version:\"1.2.3\"},logger:{log:__name(()=>{},\"log\")}};await assert.rejects(updateVersionJson(filePath,context),/Failed to replace version in/)",
                  "err": {},
                  "uuid": "1dbcf944-7610-43f5-a8b8-eb2f875ac389",
                  "parentUUID": "a1393c97-3cca-40f9-bce4-e852ce2a5ad2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "14ee034c-5724-43bf-baec-18876f3b52a2",
                  "title": "different version",
                  "fullFile": "/home/runner/work/semantic-release-jsr/semantic-release-jsr/test/lib/utils.ts",
                  "file": "/test/lib/utils.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should update version if they are different",
                      "fullTitle": "Utils updateVersionJson() different version should update version if they are different",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const mockFile='{ \"version\": \"1.2.3\" }';await writeFile(filePath,mockFile,\"utf8\");const context={nextRelease:{version:\"1.2.4\"},logger:{log:__name(()=>{},\"log\")}};await updateVersionJson(filePath,context);const updatedFile=await readFile(filePath,\"utf8\");assert.strictEqual(updatedFile,'{ \"version\": \"1.2.4\" }')",
                      "err": {},
                      "uuid": "b8e601b9-f9a4-4fda-9534-ec2eee665435",
                      "parentUUID": "14ee034c-5724-43bf-baec-18876f3b52a2",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should update version if they are different (no whitespace)",
                      "fullTitle": "Utils updateVersionJson() different version should update version if they are different (no whitespace)",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const mockFile='{\"version\":\"1.2.3\"}';await writeFile(filePath,mockFile,\"utf8\");const context={nextRelease:{version:\"1.2.4\"},logger:{log:__name(()=>{},\"log\")}};await updateVersionJson(filePath,context);const updatedFile=await readFile(filePath,\"utf8\");assert.strictEqual(updatedFile,'{\"version\":\"1.2.4\"}')",
                      "err": {},
                      "uuid": "485e8516-f3b4-42dc-9ef8-09bf0f413241",
                      "parentUUID": "14ee034c-5724-43bf-baec-18876f3b52a2",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should update version if they are different (mixed whitespace)",
                      "fullTitle": "Utils updateVersionJson() different version should update version if they are different (mixed whitespace)",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const mockFile='{\"version\"   :\"1.2.3\"   }';await writeFile(filePath,mockFile,\"utf8\");const context={nextRelease:{version:\"1.2.4\"},logger:{log:__name(()=>{},\"log\")}};await updateVersionJson(filePath,context);const updatedFile=await readFile(filePath,\"utf8\");assert.strictEqual(updatedFile,'{\"version\"   :\"1.2.4\"   }')",
                      "err": {},
                      "uuid": "6c616ea4-48ce-4632-8918-e0405a72c344",
                      "parentUUID": "14ee034c-5724-43bf-baec-18876f3b52a2",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should update version if they are different (beta version)",
                      "fullTitle": "Utils updateVersionJson() different version should update version if they are different (beta version)",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const mockFile='{ \"version\": \"1.2.3-beta.3\" }';await writeFile(filePath,mockFile,\"utf8\");const context={nextRelease:{version:\"1.2.3-beta.4\"},logger:{log:__name(()=>{},\"log\")}};await updateVersionJson(filePath,context);const updatedFile=await readFile(filePath,\"utf8\");assert.strictEqual(updatedFile,'{ \"version\": \"1.2.3-beta.4\" }')",
                      "err": {},
                      "uuid": "c925ee5f-cb9e-4fb7-aaea-da6f208384a7",
                      "parentUUID": "14ee034c-5724-43bf-baec-18876f3b52a2",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "b8e601b9-f9a4-4fda-9534-ec2eee665435",
                    "485e8516-f3b4-42dc-9ef8-09bf0f413241",
                    "6c616ea4-48ce-4632-8918-e0405a72c344",
                    "c925ee5f-cb9e-4fb7-aaea-da6f208384a7"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 3,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "c3398c94-e1e9-4987-8ed4-d0c025ee0d14",
                  "title": "same version",
                  "fullFile": "/home/runner/work/semantic-release-jsr/semantic-release-jsr/test/lib/utils.ts",
                  "file": "/test/lib/utils.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should skip when version is already up to date",
                      "fullTitle": "Utils updateVersionJson() same version should skip when version is already up to date",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const mockFile='{ \"version\": \"1.2.3\" }';await writeFile(filePath,mockFile,\"utf8\");let matched=false;const context={nextRelease:{version:\"1.2.3\"},logger:{log:__name(msg=>{if(typeof msg===\"string\"){const match=msg.match(/Skipped, (.+) is already up to date/);if(match){assert.strictEqual(match[1],filePath);matched=true}}},\"log\")}};await updateVersionJson(filePath,context);const updatedFile=await readFile(filePath,\"utf8\");assert.strictEqual(updatedFile,mockFile);assert.ok(matched)",
                      "err": {},
                      "uuid": "d6a212d8-b8e6-4d2a-85fe-9a6a0fda1794",
                      "parentUUID": "c3398c94-e1e9-4987-8ed4-d0c025ee0d14",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "d6a212d8-b8e6-4d2a-85fe-9a6a0fda1794"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [
                "1dbcf944-7610-43f5-a8b8-eb2f875ac389"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.7.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}