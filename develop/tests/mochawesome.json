{
  "stats": {
    "suites": 5,
    "tests": 8,
    "passes": 8,
    "pending": 0,
    "failures": 0,
    "start": "2024-08-03T19:21:15.293Z",
    "end": "2024-08-03T19:21:15.314Z",
    "duration": 21,
    "testsRegistered": 8,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "2fca37a3-f5d6-4704-bf7b-485b07c4dde1",
      "title": "",
      "fullFile": "/home/runner/work/semantic-release-jsr/semantic-release-jsr/test/lib/utils.ts",
      "file": "/test/lib/utils.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "aec0a765-2be4-4edb-82cb-2373b4a1d5b3",
          "title": "Utils",
          "fullFile": "/home/runner/work/semantic-release-jsr/semantic-release-jsr/test/lib/utils.ts",
          "file": "/test/lib/utils.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "d73cdeb9-cc9a-4528-80dd-63155b61596c",
              "title": "generatePublishResponse()",
              "fullFile": "/home/runner/work/semantic-release-jsr/semantic-release-jsr/test/lib/utils.ts",
              "file": "/test/lib/utils.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with release",
                  "fullTitle": "Utils generatePublishResponse() should work with release",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const config = {\n    cwd: process.cwd(),\n    name: '@sebbo2002/ical-generator',\n    prepare: {\n        versionJsonPaths: []\n    },\n    publish: {\n        binFolder: '',\n        canary: false,\n        pkgJsonPath: '',\n        publishArgs: []\n    }\n};\nconst context = {\n    nextRelease: {\n        version: '1.2.3',\n        gitTag: 'v1.2.3',\n        name: 'v1.2.3',\n        type: 'patch',\n        channel: '',\n        gitHead: '',\n        notes: '# [1.2.3](â€¦)'\n    }\n};\nconst response = generatePublishResponse(config, context);\nassert.deepStrictEqual(response, {\n    name: 'JSR.io',\n    url: 'https://jsr.io/@sebbo2002/ical-generator@1.2.3'\n});",
                  "err": {},
                  "uuid": "94f1273f-9fc7-4771-8985-6d7711c928af",
                  "parentUUID": "d73cdeb9-cc9a-4528-80dd-63155b61596c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work without release",
                  "fullTitle": "Utils generatePublishResponse() should work without release",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const config = {\n    cwd: process.cwd(),\n    name: '@sebbo2002/ical-generator',\n    prepare: {\n        versionJsonPaths: []\n    },\n    publish: {\n        binFolder: '',\n        canary: false,\n        pkgJsonPath: '',\n        publishArgs: []\n    }\n};\nconst context = {};\nconst response = generatePublishResponse(config, context);\nassert.deepStrictEqual(response, {\n    name: 'JSR.io',\n    url: 'https://jsr.io/@sebbo2002/ical-generator/versions'\n});",
                  "err": {},
                  "uuid": "25afb50b-12c4-48bd-a923-d5071952290d",
                  "parentUUID": "d73cdeb9-cc9a-4528-80dd-63155b61596c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "94f1273f-9fc7-4771-8985-6d7711c928af",
                "25afb50b-12c4-48bd-a923-d5071952290d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6a94f2b5-0dcc-4cc5-8156-d620d3b36aca",
              "title": "updateVersionJson()",
              "fullFile": "/home/runner/work/semantic-release-jsr/semantic-release-jsr/test/lib/utils.ts",
              "file": "/test/lib/utils.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"updateVersionJson()\"",
                  "fullTitle": "Utils updateVersionJson() \"before each\" hook in \"updateVersionJson()\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "tmpDir = await mkdtemp(join(tmpdir(), 'semantic-release-jsr-'));\nfilePath = join(tmpDir, 'package.json');",
                  "err": {},
                  "uuid": "407a46ad-267f-4ea4-9ce0-20c88ddb2cfc",
                  "parentUUID": "6a94f2b5-0dcc-4cc5-8156-d620d3b36aca",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"updateVersionJson()\"",
                  "fullTitle": "Utils updateVersionJson() \"after each\" hook in \"updateVersionJson()\"",
                  "timedOut": false,
                  "duration": 1,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await rm(tmpDir, { recursive: true, force: true });",
                  "err": {},
                  "uuid": "997c063b-465f-4713-a8af-7911be52e3b1",
                  "parentUUID": "6a94f2b5-0dcc-4cc5-8156-d620d3b36aca",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should throw an error if the version could not be replaced",
                  "fullTitle": "Utils updateVersionJson() should throw an error if the version could not be replaced",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mockFile = '{}';\nawait writeFile(filePath, mockFile, 'utf8');\nconst context = {\n    nextRelease: {\n        version: '1.2.3',\n    },\n    logger: {\n        log: () => { },\n    },\n};\nawait assert.rejects(updateVersionJson(filePath, context), /Failed to replace version in/);",
                  "err": {},
                  "uuid": "2764ceed-7a6c-416f-81db-969b2f8274c5",
                  "parentUUID": "6a94f2b5-0dcc-4cc5-8156-d620d3b36aca",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "75023650-2c6b-48b6-8794-cd5d34f03ee9",
                  "title": "different version",
                  "fullFile": "/home/runner/work/semantic-release-jsr/semantic-release-jsr/test/lib/utils.ts",
                  "file": "/test/lib/utils.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should update version if they are different",
                      "fullTitle": "Utils updateVersionJson() different version should update version if they are different",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const mockFile = '{ \"version\": \"1.2.3\" }';\nawait writeFile(filePath, mockFile, 'utf8');\nconst context = {\n    nextRelease: {\n        version: '1.2.4',\n    },\n    logger: {\n        log: () => { },\n    },\n};\nawait updateVersionJson(filePath, context);\nconst updatedFile = await readFile(filePath, 'utf8');\nassert.strictEqual(updatedFile, '{ \"version\": \"1.2.4\" }');",
                      "err": {},
                      "uuid": "2c00d847-cc89-457f-b2ba-ab79ecdbdcf6",
                      "parentUUID": "75023650-2c6b-48b6-8794-cd5d34f03ee9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should update version if they are different (no whitespace)",
                      "fullTitle": "Utils updateVersionJson() different version should update version if they are different (no whitespace)",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const mockFile = '{\"version\":\"1.2.3\"}';\nawait writeFile(filePath, mockFile, 'utf8');\nconst context = {\n    nextRelease: {\n        version: '1.2.4',\n    },\n    logger: {\n        log: () => { },\n    },\n};\nawait updateVersionJson(filePath, context);\nconst updatedFile = await readFile(filePath, 'utf8');\nassert.strictEqual(updatedFile, '{\"version\":\"1.2.4\"}');",
                      "err": {},
                      "uuid": "f027688f-7fa1-49a2-b213-05237046e9db",
                      "parentUUID": "75023650-2c6b-48b6-8794-cd5d34f03ee9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should update version if they are different (mixed whitespace)",
                      "fullTitle": "Utils updateVersionJson() different version should update version if they are different (mixed whitespace)",
                      "timedOut": false,
                      "duration": 3,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const mockFile = '{\"version\"   :\"1.2.3\"   }';\nawait writeFile(filePath, mockFile, 'utf8');\nconst context = {\n    nextRelease: {\n        version: '1.2.4',\n    },\n    logger: {\n        log: () => { },\n    },\n};\nawait updateVersionJson(filePath, context);\nconst updatedFile = await readFile(filePath, 'utf8');\nassert.strictEqual(updatedFile, '{\"version\"   :\"1.2.4\"   }');",
                      "err": {},
                      "uuid": "4301ac0e-8f8f-425a-a352-0e8423e8acb5",
                      "parentUUID": "75023650-2c6b-48b6-8794-cd5d34f03ee9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should update version if they are different (beta version)",
                      "fullTitle": "Utils updateVersionJson() different version should update version if they are different (beta version)",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const mockFile = '{ \"version\": \"1.2.3-beta.3\" }';\nawait writeFile(filePath, mockFile, 'utf8');\nconst context = {\n    nextRelease: {\n        version: '1.2.3-beta.4',\n    },\n    logger: {\n        log: () => { },\n    },\n};\nawait updateVersionJson(filePath, context);\nconst updatedFile = await readFile(filePath, 'utf8');\nassert.strictEqual(updatedFile, '{ \"version\": \"1.2.3-beta.4\" }');",
                      "err": {},
                      "uuid": "e64aba06-ed88-4842-b21f-6c85f16018b6",
                      "parentUUID": "75023650-2c6b-48b6-8794-cd5d34f03ee9",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "2c00d847-cc89-457f-b2ba-ab79ecdbdcf6",
                    "f027688f-7fa1-49a2-b213-05237046e9db",
                    "4301ac0e-8f8f-425a-a352-0e8423e8acb5",
                    "e64aba06-ed88-4842-b21f-6c85f16018b6"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 6,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "05ea0c93-e184-4400-8558-ae66a112a910",
                  "title": "same version",
                  "fullFile": "/home/runner/work/semantic-release-jsr/semantic-release-jsr/test/lib/utils.ts",
                  "file": "/test/lib/utils.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should skip when version is already up to date",
                      "fullTitle": "Utils updateVersionJson() same version should skip when version is already up to date",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const mockFile = '{ \"version\": \"1.2.3\" }';\nawait writeFile(filePath, mockFile, 'utf8');\nlet matched = false;\nconst context = {\n    nextRelease: {\n        version: '1.2.3',\n    },\n    logger: {\n        log: (msg) => {\n            if (typeof msg === 'string') {\n                const match = msg.match(/Skipped, (.+) is already up to date/);\n                if (match) {\n                    assert.strictEqual(match[1], filePath);\n                    matched = true;\n                }\n            }\n        },\n    },\n};\nawait updateVersionJson(filePath, context);\nconst updatedFile = await readFile(filePath, 'utf8');\nassert.strictEqual(updatedFile, mockFile);\nassert.ok(matched);",
                      "err": {},
                      "uuid": "146b49a7-18ee-4a63-a967-28083abda54d",
                      "parentUUID": "05ea0c93-e184-4400-8558-ae66a112a910",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "146b49a7-18ee-4a63-a967-28083abda54d"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [
                "2764ceed-7a6c-416f-81db-969b2f8274c5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.7.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}