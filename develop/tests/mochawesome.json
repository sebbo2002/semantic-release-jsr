{
  "stats": {
    "suites": 5,
    "tests": 7,
    "passes": 7,
    "pending": 0,
    "failures": 0,
    "start": "2024-07-26T12:36:05.591Z",
    "end": "2024-07-26T12:36:05.609Z",
    "duration": 18,
    "testsRegistered": 7,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "6b573b81-d052-495e-8fb7-05682ec480f7",
      "title": "",
      "fullFile": "/home/runner/work/semantic-release-jsr/semantic-release-jsr/test/lib/utils.ts",
      "file": "/test/lib/utils.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "50077064-8c16-4e4f-ac23-d1f4ccda5a75",
          "title": "Utils",
          "fullFile": "/home/runner/work/semantic-release-jsr/semantic-release-jsr/test/lib/utils.ts",
          "file": "/test/lib/utils.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "8f68e6b0-5b5f-4b37-8a14-aaa2143b4d5c",
              "title": "generatePublishResponse()",
              "fullFile": "/home/runner/work/semantic-release-jsr/semantic-release-jsr/test/lib/utils.ts",
              "file": "/test/lib/utils.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with release",
                  "fullTitle": "Utils generatePublishResponse() should work with release",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const config = {\n    cwd: process.cwd(),\n    name: '@sebbo2002/ical-generator',\n    prepare: {\n        versionJsonPaths: []\n    },\n    publish: {\n        binFolder: '',\n        pkgJsonPath: '',\n        publishArgs: []\n    }\n};\nconst context = {\n    nextRelease: {\n        version: '1.2.3',\n        gitTag: 'v1.2.3',\n        name: 'v1.2.3',\n        type: 'patch',\n        channel: '',\n        gitHead: '',\n        notes: '# [1.2.3](â€¦)'\n    }\n};\nconst response = generatePublishResponse(config, context);\nassert.deepStrictEqual(response, {\n    name: 'JSR.io',\n    url: 'https://jsr.io/@sebbo2002/ical-generator@1.2.3'\n});",
                  "err": {},
                  "uuid": "64e73d18-b545-4d02-a88e-bb2e39ec9044",
                  "parentUUID": "8f68e6b0-5b5f-4b37-8a14-aaa2143b4d5c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work without release",
                  "fullTitle": "Utils generatePublishResponse() should work without release",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const config = {\n    cwd: process.cwd(),\n    name: '@sebbo2002/ical-generator',\n    prepare: {\n        versionJsonPaths: []\n    },\n    publish: {\n        binFolder: '',\n        pkgJsonPath: '',\n        publishArgs: []\n    }\n};\nconst context = {};\nconst response = generatePublishResponse(config, context);\nassert.deepStrictEqual(response, {\n    name: 'JSR.io',\n    url: 'https://jsr.io/@sebbo2002/ical-generator/versions'\n});",
                  "err": {},
                  "uuid": "2da23a0d-addf-44f2-a194-702b61aa5bd5",
                  "parentUUID": "8f68e6b0-5b5f-4b37-8a14-aaa2143b4d5c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "64e73d18-b545-4d02-a88e-bb2e39ec9044",
                "2da23a0d-addf-44f2-a194-702b61aa5bd5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "57443a99-e1ef-41f9-b79f-594f15b4556f",
              "title": "updateVersionJson()",
              "fullFile": "/home/runner/work/semantic-release-jsr/semantic-release-jsr/test/lib/utils.ts",
              "file": "/test/lib/utils.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"updateVersionJson()\"",
                  "fullTitle": "Utils updateVersionJson() \"before each\" hook in \"updateVersionJson()\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(this, void 0, void 0, function* () {\n                tmpDir = yield mkdtemp(join(tmpdir(), 'semantic-release-jsr-'));\n                filePath = join(tmpDir, 'package.json');\n            })",
                  "err": {},
                  "uuid": "168c5d12-2307-4057-9dfe-c2c85b2a7b68",
                  "parentUUID": "57443a99-e1ef-41f9-b79f-594f15b4556f",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"updateVersionJson()\"",
                  "fullTitle": "Utils updateVersionJson() \"after each\" hook in \"updateVersionJson()\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(this, void 0, void 0, function* () {\n                yield rm(tmpDir, { recursive: true, force: true });\n            })",
                  "err": {},
                  "uuid": "408a1257-5ae1-475e-b6fa-ad8f48f1dc99",
                  "parentUUID": "57443a99-e1ef-41f9-b79f-594f15b4556f",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [],
              "suites": [
                {
                  "uuid": "5c328841-3ea1-4f4f-a5f9-619431059996",
                  "title": "different version",
                  "fullFile": "/home/runner/work/semantic-release-jsr/semantic-release-jsr/test/lib/utils.ts",
                  "file": "/test/lib/utils.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should update version if they are different",
                      "fullTitle": "Utils updateVersionJson() different version should update version if they are different",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "return __awaiter(this, void 0, void 0, function* () {\n    const mockFile = '{ \"version\": \"1.2.3\" }';\n    yield writeFile(filePath, mockFile, 'utf8');\n    const context = {\n        nextRelease: {\n            version: '1.2.4',\n        },\n        logger: {\n            log: () => { },\n        },\n    };\n    yield updateVersionJson(filePath, context);\n    const updatedFile = yield readFile(filePath, 'utf8');\n    assert.strictEqual(updatedFile, '{ \"version\": \"1.2.4\" }');\n});",
                      "err": {},
                      "uuid": "ff4d0902-7d9d-4fb8-93cf-0fbc6e8071b3",
                      "parentUUID": "5c328841-3ea1-4f4f-a5f9-619431059996",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should update version if they are different (no whitespace)",
                      "fullTitle": "Utils updateVersionJson() different version should update version if they are different (no whitespace)",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "return __awaiter(this, void 0, void 0, function* () {\n    const mockFile = '{\"version\":\"1.2.3\"}';\n    yield writeFile(filePath, mockFile, 'utf8');\n    const context = {\n        nextRelease: {\n            version: '1.2.4',\n        },\n        logger: {\n            log: () => { },\n        },\n    };\n    yield updateVersionJson(filePath, context);\n    const updatedFile = yield readFile(filePath, 'utf8');\n    assert.strictEqual(updatedFile, '{\"version\":\"1.2.4\"}');\n});",
                      "err": {},
                      "uuid": "b5801a7e-aff5-4580-adde-6cc9925703b3",
                      "parentUUID": "5c328841-3ea1-4f4f-a5f9-619431059996",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should update version if they are different (mixed whitespace)",
                      "fullTitle": "Utils updateVersionJson() different version should update version if they are different (mixed whitespace)",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "return __awaiter(this, void 0, void 0, function* () {\n    const mockFile = '{\"version\"   :\"1.2.3\"   }';\n    yield writeFile(filePath, mockFile, 'utf8');\n    const context = {\n        nextRelease: {\n            version: '1.2.4',\n        },\n        logger: {\n            log: () => { },\n        },\n    };\n    yield updateVersionJson(filePath, context);\n    const updatedFile = yield readFile(filePath, 'utf8');\n    assert.strictEqual(updatedFile, '{\"version\"   :\"1.2.4\"   }');\n});",
                      "err": {},
                      "uuid": "53066cc4-017d-4575-8a00-4299210dff51",
                      "parentUUID": "5c328841-3ea1-4f4f-a5f9-619431059996",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should update version if they are different (beta version)",
                      "fullTitle": "Utils updateVersionJson() different version should update version if they are different (beta version)",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "return __awaiter(this, void 0, void 0, function* () {\n    const mockFile = '{ \"version\": \"1.2.3-beta.3\" }';\n    yield writeFile(filePath, mockFile, 'utf8');\n    const context = {\n        nextRelease: {\n            version: '1.2.3-beta.4',\n        },\n        logger: {\n            log: () => { },\n        },\n    };\n    yield updateVersionJson(filePath, context);\n    const updatedFile = yield readFile(filePath, 'utf8');\n    assert.strictEqual(updatedFile, '{ \"version\": \"1.2.3-beta.4\" }');\n});",
                      "err": {},
                      "uuid": "32234778-21c4-468c-89ad-1a0fd8e35ad2",
                      "parentUUID": "5c328841-3ea1-4f4f-a5f9-619431059996",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "ff4d0902-7d9d-4fb8-93cf-0fbc6e8071b3",
                    "b5801a7e-aff5-4580-adde-6cc9925703b3",
                    "53066cc4-017d-4575-8a00-4299210dff51",
                    "32234778-21c4-468c-89ad-1a0fd8e35ad2"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 5,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "e7c66fc5-f4a0-463c-8c91-60777230ee13",
                  "title": "same version",
                  "fullFile": "/home/runner/work/semantic-release-jsr/semantic-release-jsr/test/lib/utils.ts",
                  "file": "/test/lib/utils.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should skip when version is already up to date",
                      "fullTitle": "Utils updateVersionJson() same version should skip when version is already up to date",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "return __awaiter(this, void 0, void 0, function* () {\n    const mockFile = '{ \"version\": \"1.2.3\" }';\n    yield writeFile(filePath, mockFile, 'utf8');\n    let matched = false;\n    const context = {\n        nextRelease: {\n            version: '1.2.3',\n        },\n        logger: {\n            log: (msg) => {\n                if (typeof msg === 'string') {\n                    const match = msg.match(/Skipped, (.+) is already up to date/);\n                    if (match) {\n                        assert.strictEqual(match[1], filePath);\n                        matched = true;\n                    }\n                }\n            },\n        },\n    };\n    yield updateVersionJson(filePath, context);\n    const updatedFile = yield readFile(filePath, 'utf8');\n    assert.strictEqual(updatedFile, mockFile);\n    assert.ok(matched);\n});",
                      "err": {},
                      "uuid": "3ac10b3d-ee22-4d33-adb1-7e53cfa3166e",
                      "parentUUID": "e7c66fc5-f4a0-463c-8c91-60777230ee13",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "3ac10b3d-ee22-4d33-adb1-7e53cfa3166e"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}