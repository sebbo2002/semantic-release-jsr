{
  "stats": {
    "suites": 5,
    "tests": 8,
    "passes": 8,
    "pending": 0,
    "failures": 0,
    "start": "2025-02-07T19:54:30.026Z",
    "end": "2025-02-07T19:54:30.044Z",
    "duration": 18,
    "testsRegistered": 8,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "f3090163-a15f-449b-9e90-4eae145d618e",
      "title": "",
      "fullFile": "/home/runner/work/semantic-release-jsr/semantic-release-jsr/test/lib/utils.ts",
      "file": "/test/lib/utils.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "6120df3e-769c-402f-b763-3f0fba786136",
          "title": "Utils",
          "fullFile": "/home/runner/work/semantic-release-jsr/semantic-release-jsr/test/lib/utils.ts",
          "file": "/test/lib/utils.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "abec59bc-eede-4d48-bf79-537dbc19eaaf",
              "title": "generatePublishResponse()",
              "fullFile": "/home/runner/work/semantic-release-jsr/semantic-release-jsr/test/lib/utils.ts",
              "file": "/test/lib/utils.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with release",
                  "fullTitle": "Utils generatePublishResponse() should work with release",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const config={cwd:process.cwd(),name:\"@sebbo2002/ical-generator\",prepare:{versionJsonPaths:[]},publish:{binFolder:\"\",canary:false,pkgJsonPath:\"\",publishArgs:[]}};const context={nextRelease:{version:\"1.2.3\",gitTag:\"v1.2.3\",name:\"v1.2.3\",type:\"patch\",channel:\"\",gitHead:\"\",notes:\"# [1.2.3](\\u2026)\"}};const response=generatePublishResponse(config,context);assert.deepStrictEqual(response,{name:\"JSR.io\",url:\"https://jsr.io/@sebbo2002/ical-generator@1.2.3\"})",
                  "err": {},
                  "uuid": "1f96a7c4-20f9-49e9-bd05-6d34135fc369",
                  "parentUUID": "abec59bc-eede-4d48-bf79-537dbc19eaaf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work without release",
                  "fullTitle": "Utils generatePublishResponse() should work without release",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const config={cwd:process.cwd(),name:\"@sebbo2002/ical-generator\",prepare:{versionJsonPaths:[]},publish:{binFolder:\"\",canary:false,pkgJsonPath:\"\",publishArgs:[]}};const context={};const response=generatePublishResponse(config,context);assert.deepStrictEqual(response,{name:\"JSR.io\",url:\"https://jsr.io/@sebbo2002/ical-generator/versions\"})",
                  "err": {},
                  "uuid": "ea1ee837-56fe-41fb-828c-bbca041b852b",
                  "parentUUID": "abec59bc-eede-4d48-bf79-537dbc19eaaf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1f96a7c4-20f9-49e9-bd05-6d34135fc369",
                "ea1ee837-56fe-41fb-828c-bbca041b852b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "124ab445-19f6-4de6-9034-3d33f8eb5ff6",
              "title": "updateVersionJson()",
              "fullFile": "/home/runner/work/semantic-release-jsr/semantic-release-jsr/test/lib/utils.ts",
              "file": "/test/lib/utils.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"updateVersionJson()\"",
                  "fullTitle": "Utils updateVersionJson() \"before each\" hook in \"updateVersionJson()\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "tmpDir=await mkdtemp(join(tmpdir(),\"semantic-release-jsr-\"));filePath=join(tmpDir,\"package.json\")",
                  "err": {},
                  "uuid": "44441c31-7e74-40d3-aa40-3d19e419fee6",
                  "parentUUID": "124ab445-19f6-4de6-9034-3d33f8eb5ff6",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"updateVersionJson()\"",
                  "fullTitle": "Utils updateVersionJson() \"after each\" hook in \"updateVersionJson()\"",
                  "timedOut": false,
                  "duration": 1,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await rm(tmpDir,{recursive:true,force:true})",
                  "err": {},
                  "uuid": "2b824779-53e2-4211-aa9b-ce5781448ba1",
                  "parentUUID": "124ab445-19f6-4de6-9034-3d33f8eb5ff6",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should throw an error if the version could not be replaced",
                  "fullTitle": "Utils updateVersionJson() should throw an error if the version could not be replaced",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mockFile=\"{}\";await writeFile(filePath,mockFile,\"utf8\");const context={nextRelease:{version:\"1.2.3\"},logger:{log:__name(()=>{},\"log\")}};await assert.rejects(updateVersionJson(filePath,context),/Failed to replace version in/)",
                  "err": {},
                  "uuid": "c384f087-c451-4e24-9da5-8aa30d117ff1",
                  "parentUUID": "124ab445-19f6-4de6-9034-3d33f8eb5ff6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "299648ec-8bf4-4c87-af87-17fc94d48c29",
                  "title": "different version",
                  "fullFile": "/home/runner/work/semantic-release-jsr/semantic-release-jsr/test/lib/utils.ts",
                  "file": "/test/lib/utils.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should update version if they are different",
                      "fullTitle": "Utils updateVersionJson() different version should update version if they are different",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const mockFile='{ \"version\": \"1.2.3\" }';await writeFile(filePath,mockFile,\"utf8\");const context={nextRelease:{version:\"1.2.4\"},logger:{log:__name(()=>{},\"log\")}};await updateVersionJson(filePath,context);const updatedFile=await readFile(filePath,\"utf8\");assert.strictEqual(updatedFile,'{ \"version\": \"1.2.4\" }')",
                      "err": {},
                      "uuid": "a44a70d9-ad87-4a5f-84c4-fc1931f08b59",
                      "parentUUID": "299648ec-8bf4-4c87-af87-17fc94d48c29",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should update version if they are different (no whitespace)",
                      "fullTitle": "Utils updateVersionJson() different version should update version if they are different (no whitespace)",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const mockFile='{\"version\":\"1.2.3\"}';await writeFile(filePath,mockFile,\"utf8\");const context={nextRelease:{version:\"1.2.4\"},logger:{log:__name(()=>{},\"log\")}};await updateVersionJson(filePath,context);const updatedFile=await readFile(filePath,\"utf8\");assert.strictEqual(updatedFile,'{\"version\":\"1.2.4\"}')",
                      "err": {},
                      "uuid": "5424bcab-ce91-4ea5-a9f2-2f842d8d5cd9",
                      "parentUUID": "299648ec-8bf4-4c87-af87-17fc94d48c29",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should update version if they are different (mixed whitespace)",
                      "fullTitle": "Utils updateVersionJson() different version should update version if they are different (mixed whitespace)",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const mockFile='{\"version\"   :\"1.2.3\"   }';await writeFile(filePath,mockFile,\"utf8\");const context={nextRelease:{version:\"1.2.4\"},logger:{log:__name(()=>{},\"log\")}};await updateVersionJson(filePath,context);const updatedFile=await readFile(filePath,\"utf8\");assert.strictEqual(updatedFile,'{\"version\"   :\"1.2.4\"   }')",
                      "err": {},
                      "uuid": "51a8f79c-80b1-40b3-9f77-cd1005a10033",
                      "parentUUID": "299648ec-8bf4-4c87-af87-17fc94d48c29",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should update version if they are different (beta version)",
                      "fullTitle": "Utils updateVersionJson() different version should update version if they are different (beta version)",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const mockFile='{ \"version\": \"1.2.3-beta.3\" }';await writeFile(filePath,mockFile,\"utf8\");const context={nextRelease:{version:\"1.2.3-beta.4\"},logger:{log:__name(()=>{},\"log\")}};await updateVersionJson(filePath,context);const updatedFile=await readFile(filePath,\"utf8\");assert.strictEqual(updatedFile,'{ \"version\": \"1.2.3-beta.4\" }')",
                      "err": {},
                      "uuid": "a7f59961-3fa9-4b7a-b30f-7cfbd9efc050",
                      "parentUUID": "299648ec-8bf4-4c87-af87-17fc94d48c29",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "a44a70d9-ad87-4a5f-84c4-fc1931f08b59",
                    "5424bcab-ce91-4ea5-a9f2-2f842d8d5cd9",
                    "51a8f79c-80b1-40b3-9f77-cd1005a10033",
                    "a7f59961-3fa9-4b7a-b30f-7cfbd9efc050"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "3cbf5f45-270e-4097-ba7c-85d6d60f86f4",
                  "title": "same version",
                  "fullFile": "/home/runner/work/semantic-release-jsr/semantic-release-jsr/test/lib/utils.ts",
                  "file": "/test/lib/utils.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should skip when version is already up to date",
                      "fullTitle": "Utils updateVersionJson() same version should skip when version is already up to date",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const mockFile='{ \"version\": \"1.2.3\" }';await writeFile(filePath,mockFile,\"utf8\");let matched=false;const context={nextRelease:{version:\"1.2.3\"},logger:{log:__name(msg=>{if(typeof msg===\"string\"){const match=msg.match(/Skipped, (.+) is already up to date/);if(match){assert.strictEqual(match[1],filePath);matched=true}}},\"log\")}};await updateVersionJson(filePath,context);const updatedFile=await readFile(filePath,\"utf8\");assert.strictEqual(updatedFile,mockFile);assert.ok(matched)",
                      "err": {},
                      "uuid": "f4b15396-73c1-46ef-882f-46f492434c2c",
                      "parentUUID": "3cbf5f45-270e-4097-ba7c-85d6d60f86f4",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "f4b15396-73c1-46ef-882f-46f492434c2c"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [
                "c384f087-c451-4e24-9da5-8aa30d117ff1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.1.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}